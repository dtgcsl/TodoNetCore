// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TodoWebApi.Data;

#nullable disable

namespace TodoWebApi.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0-preview.2.23128.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TodoWebApi.Models.Permission", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("Permission");
                });

            modelBuilder.Entity("TodoWebApi.Models.Role", b =>
                {
                    b.Property<int>("rid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("rid"));

                    b.Property<int>("name")
                        .HasColumnType("integer");

                    b.Property<int>("uid")
                        .HasColumnType("integer");

                    b.HasKey("rid");

                    b.HasIndex("uid");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("TodoWebApi.Models.RoleHasPermission", b =>
                {
                    b.Property<int>("permissionId")
                        .HasColumnType("integer");

                    b.Property<int>("rid")
                        .HasColumnType("integer");

                    b.HasKey("permissionId", "rid");

                    b.HasIndex("rid");

                    b.ToTable("RoleHasPermissions");
                });

            modelBuilder.Entity("TodoWebApi.Models.Todo", b =>
                {
                    b.Property<int>("todoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("todoId"));

                    b.Property<DateTimeOffset>("createAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("createdById")
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("updateAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("todoId");

                    b.ToTable("Todo");
                });

            modelBuilder.Entity("TodoWebApi.Models.User", b =>
                {
                    b.Property<int>("uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("uid"));

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("uid");

                    b.ToTable("User");
                });

            modelBuilder.Entity("TodoWebApi.Models.UserHasTodo", b =>
                {
                    b.Property<int>("todoId")
                        .HasColumnType("integer");

                    b.Property<int>("uid")
                        .HasColumnType("integer");

                    b.HasKey("todoId", "uid");

                    b.HasIndex("uid");

                    b.ToTable("UserHasTodos");
                });

            modelBuilder.Entity("TodoWebApi.Models.Role", b =>
                {
                    b.HasOne("TodoWebApi.Models.User", "User")
                        .WithMany("Role")
                        .HasForeignKey("uid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TodoWebApi.Models.RoleHasPermission", b =>
                {
                    b.HasOne("TodoWebApi.Models.Permission", "Permission")
                        .WithMany("RoleHasPermissions")
                        .HasForeignKey("permissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TodoWebApi.Models.Role", "Role")
                        .WithMany("RoleHasPermissions")
                        .HasForeignKey("rid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("TodoWebApi.Models.UserHasTodo", b =>
                {
                    b.HasOne("TodoWebApi.Models.Todo", "Todo")
                        .WithMany("UserHasTodos")
                        .HasForeignKey("todoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TodoWebApi.Models.User", "User")
                        .WithMany("UserHasTodos")
                        .HasForeignKey("uid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Todo");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TodoWebApi.Models.Permission", b =>
                {
                    b.Navigation("RoleHasPermissions");
                });

            modelBuilder.Entity("TodoWebApi.Models.Role", b =>
                {
                    b.Navigation("RoleHasPermissions");
                });

            modelBuilder.Entity("TodoWebApi.Models.Todo", b =>
                {
                    b.Navigation("UserHasTodos");
                });

            modelBuilder.Entity("TodoWebApi.Models.User", b =>
                {
                    b.Navigation("Role");

                    b.Navigation("UserHasTodos");
                });
#pragma warning restore 612, 618
        }
    }
}
